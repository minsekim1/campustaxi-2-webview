{"ast":null,"code":"import './environment.js';\nimport { toObserver } from './utils.js';\nimport './types.js';\nimport './actionTypes.js';\nimport { toActorRef } from './Actor.js';\n\nfunction spawnBehavior(behavior, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var state = behavior.initialState;\n  var observers = new Set();\n  var mailbox = [];\n  var flushing = false;\n\n  var flush = function () {\n    if (flushing) {\n      return;\n    }\n\n    flushing = true;\n\n    while (mailbox.length > 0) {\n      var event_1 = mailbox.shift();\n      state = behavior.transition(state, event_1, actorCtx);\n      observers.forEach(function (observer) {\n        return observer.next(state);\n      });\n    }\n\n    flushing = false;\n  };\n\n  var actor = toActorRef({\n    id: options.id,\n    send: function (event) {\n      mailbox.push(event);\n      flush();\n    },\n    getSnapshot: function () {\n      return state;\n    },\n    subscribe: function (next, handleError, complete) {\n      var observer = toObserver(next, handleError, complete);\n      observers.add(observer);\n      observer.next(state);\n      return {\n        unsubscribe: function () {\n          observers.delete(observer);\n        }\n      };\n    }\n  });\n  var actorCtx = {\n    parent: options.parent,\n    self: actor,\n    id: options.id || 'anonymous',\n    observers: observers\n  };\n  state = behavior.start ? behavior.start(actorCtx) : state;\n  return actor;\n}\n\nexport { spawnBehavior };","map":{"version":3,"sources":["/Users/macbook/_myProject/campustaxi-2-webview/node_modules/xstate/es/behaviors.js"],"names":["toObserver","toActorRef","spawnBehavior","behavior","options","state","initialState","observers","Set","mailbox","flushing","flush","length","event_1","shift","transition","actorCtx","forEach","observer","next","actor","id","send","event","push","getSnapshot","subscribe","handleError","complete","add","unsubscribe","delete","parent","self","start"],"mappings":"AAAA,OAAO,kBAAP;AACA,SAASA,UAAT,QAA2B,YAA3B;AACA,OAAO,YAAP;AACA,OAAO,kBAAP;AACA,SAASC,UAAT,QAA2B,YAA3B;;AAEA,SAASC,aAAT,CAAuBC,QAAvB,EAAiCC,OAAjC,EAA0C;AACxC,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AACtBA,IAAAA,OAAO,GAAG,EAAV;AACD;;AAED,MAAIC,KAAK,GAAGF,QAAQ,CAACG,YAArB;AACA,MAAIC,SAAS,GAAG,IAAIC,GAAJ,EAAhB;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,QAAQ,GAAG,KAAf;;AAEA,MAAIC,KAAK,GAAG,YAAY;AACtB,QAAID,QAAJ,EAAc;AACZ;AACD;;AAEDA,IAAAA,QAAQ,GAAG,IAAX;;AAEA,WAAOD,OAAO,CAACG,MAAR,GAAiB,CAAxB,EAA2B;AACzB,UAAIC,OAAO,GAAGJ,OAAO,CAACK,KAAR,EAAd;AACAT,MAAAA,KAAK,GAAGF,QAAQ,CAACY,UAAT,CAAoBV,KAApB,EAA2BQ,OAA3B,EAAoCG,QAApC,CAAR;AACAT,MAAAA,SAAS,CAACU,OAAV,CAAkB,UAAUC,QAAV,EAAoB;AACpC,eAAOA,QAAQ,CAACC,IAAT,CAAcd,KAAd,CAAP;AACD,OAFD;AAGD;;AAEDK,IAAAA,QAAQ,GAAG,KAAX;AACD,GAhBD;;AAkBA,MAAIU,KAAK,GAAGnB,UAAU,CAAC;AACrBoB,IAAAA,EAAE,EAAEjB,OAAO,CAACiB,EADS;AAErBC,IAAAA,IAAI,EAAE,UAAUC,KAAV,EAAiB;AACrBd,MAAAA,OAAO,CAACe,IAAR,CAAaD,KAAb;AACAZ,MAAAA,KAAK;AACN,KALoB;AAMrBc,IAAAA,WAAW,EAAE,YAAY;AACvB,aAAOpB,KAAP;AACD,KARoB;AASrBqB,IAAAA,SAAS,EAAE,UAAUP,IAAV,EAAgBQ,WAAhB,EAA6BC,QAA7B,EAAuC;AAChD,UAAIV,QAAQ,GAAGlB,UAAU,CAACmB,IAAD,EAAOQ,WAAP,EAAoBC,QAApB,CAAzB;AACArB,MAAAA,SAAS,CAACsB,GAAV,CAAcX,QAAd;AACAA,MAAAA,QAAQ,CAACC,IAAT,CAAcd,KAAd;AACA,aAAO;AACLyB,QAAAA,WAAW,EAAE,YAAY;AACvBvB,UAAAA,SAAS,CAACwB,MAAV,CAAiBb,QAAjB;AACD;AAHI,OAAP;AAKD;AAlBoB,GAAD,CAAtB;AAoBA,MAAIF,QAAQ,GAAG;AACbgB,IAAAA,MAAM,EAAE5B,OAAO,CAAC4B,MADH;AAEbC,IAAAA,IAAI,EAAEb,KAFO;AAGbC,IAAAA,EAAE,EAAEjB,OAAO,CAACiB,EAAR,IAAc,WAHL;AAIbd,IAAAA,SAAS,EAAEA;AAJE,GAAf;AAMAF,EAAAA,KAAK,GAAGF,QAAQ,CAAC+B,KAAT,GAAiB/B,QAAQ,CAAC+B,KAAT,CAAelB,QAAf,CAAjB,GAA4CX,KAApD;AACA,SAAOe,KAAP;AACD;;AAED,SAASlB,aAAT","sourcesContent":["import './environment.js';\nimport { toObserver } from './utils.js';\nimport './types.js';\nimport './actionTypes.js';\nimport { toActorRef } from './Actor.js';\n\nfunction spawnBehavior(behavior, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var state = behavior.initialState;\n  var observers = new Set();\n  var mailbox = [];\n  var flushing = false;\n\n  var flush = function () {\n    if (flushing) {\n      return;\n    }\n\n    flushing = true;\n\n    while (mailbox.length > 0) {\n      var event_1 = mailbox.shift();\n      state = behavior.transition(state, event_1, actorCtx);\n      observers.forEach(function (observer) {\n        return observer.next(state);\n      });\n    }\n\n    flushing = false;\n  };\n\n  var actor = toActorRef({\n    id: options.id,\n    send: function (event) {\n      mailbox.push(event);\n      flush();\n    },\n    getSnapshot: function () {\n      return state;\n    },\n    subscribe: function (next, handleError, complete) {\n      var observer = toObserver(next, handleError, complete);\n      observers.add(observer);\n      observer.next(state);\n      return {\n        unsubscribe: function () {\n          observers.delete(observer);\n        }\n      };\n    }\n  });\n  var actorCtx = {\n    parent: options.parent,\n    self: actor,\n    id: options.id || 'anonymous',\n    observers: observers\n  };\n  state = behavior.start ? behavior.start(actorCtx) : state;\n  return actor;\n}\n\nexport { spawnBehavior };\n"]},"metadata":{},"sourceType":"module"}