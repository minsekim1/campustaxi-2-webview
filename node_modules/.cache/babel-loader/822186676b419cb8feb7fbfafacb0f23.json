{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/_myProject/campustaxi-2-webview/src/components/Input/CommandInput/CH.js\",\n    _s = $RefreshSig$();\n\nimport { GRAY7, SCREEN_WIDTH } from \"../../../style\";\nimport { useState, useCallback, useRef } from \"react\";\nimport TextareaAutosize from \"react-autosize-textarea\";\nimport { offset } from \"caret-pos\";\nimport { useRecoilState } from \"recoil\";\nimport { commandInputListState, commandWindowState } from \"../../recoil\";\nimport { platform } from './CTextarea';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CH = ({\n  index,\n  type = \"h1\"\n}) => {\n  _s();\n\n  const [placeholder, setPlaceHolder] = useState(\"\");\n  const [rowIndex, setRowIndex] = useState({\n    height: 0,\n    index: 0\n  });\n  const [beforeInput, setBeforeInput] = useState(\"\");\n  const [commandWindow, setCommandWindow] = useRecoilState(commandWindowState);\n  const [commandInputList, setCommandInputList] = useRecoilState(commandInputListState);\n  const ref = useRef();\n  const onChangeInput = useCallback(e => {\n    //#region #누르면 명령어창 보여줌 || 안드로이드 설정(한번에 여러개들어옴)\n    if (e.nativeEvent.data == \"#\" || platform === \"android\" && !!e.nativeEvent.data && e.nativeEvent.data.includes(\"#\")) {\n      let {\n        left,\n        top,\n        height\n      } = offset(ref.current); //#region 가로이동 제한 & height 화면 안 넘어가게 제한\n      // 가로제한\n\n      if (left + 260 > SCREEN_WIDTH && left < 260) {\n        left = commandWindow.left;\n      } else if (SCREEN_WIDTH - left < 260 && left > 260) left -= 280; // 세로제한\n\n\n      let heightCommand = 448;\n      top -= heightCommand;\n\n      if (top < 0) {\n        heightCommand += top - height;\n        top = 0;\n      } //#endregion\n\n\n      setCommandWindow({\n        visible: true,\n        top: top,\n        left: left,\n        index: index,\n        height: heightCommand\n      });\n    } else {\n      setCommandWindow({ ...commandWindow,\n        visible: false,\n        index: -1,\n        height: 0\n      });\n    } //#region 내용업데이트\n\n\n    setCommandInputList([...commandInputList.slice(0, index), { ...commandInputList[index],\n      content: e.target.value\n    }, ...commandInputList.slice(index + 1, 999)]); //#endregion\n\n    setBeforeInput(e.target.value); //#endregion #누르면 명령어창 보여줌\n  }, [rowIndex, beforeInput, commandWindow, index]);\n\n  const onBlur = () => {\n    setPlaceHolder(\"\");\n  };\n\n  const onFocus = () => {\n    if (commandWindow.index != index) {\n      if (commandWindow.visible) setCommandWindow({ ...commandWindow,\n        visible: false,\n        index: index\n      });else setCommandWindow({ ...commandWindow,\n        index: index\n      });\n    }\n\n    setPlaceHolder('명령어 사용시 \"#\"을 입력하세요.');\n  };\n\n  const style = type == \"h1\" ? {\n    fontSize: 21,\n    fontWeight: \"bold\"\n  } : type == \"h2\" ? {\n    fontSize: 18\n  } : {\n    fontSize: 16\n  };\n  return /*#__PURE__*/_jsxDEV(TextareaAutosize, {\n    ref: ref,\n    onFocus: onFocus,\n    onChange: onChangeInput,\n    placeholder: placeholder,\n    onBlur: onBlur,\n    defaultValue: commandInputList[index].content,\n    style: { ...style,\n      width: SCREEN_WIDTH - 60,\n      height: \"20px\",\n      border: \"none\",\n      color: GRAY7,\n      resize: \"none\",\n      fontFamily: \"AppleSDGothic\",\n      overflow: \"hidden\",\n      outline: \"none\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CH, \"wcJxYVDs0J7IyNKBXfrivDNYKCA=\", false, function () {\n  return [useRecoilState, useRecoilState];\n});\n\n_c = CH;\n\nvar _c;\n\n$RefreshReg$(_c, \"CH\");","map":{"version":3,"sources":["/Users/macbook/_myProject/campustaxi-2-webview/src/components/Input/CommandInput/CH.js"],"names":["GRAY7","SCREEN_WIDTH","useState","useCallback","useRef","TextareaAutosize","offset","useRecoilState","commandInputListState","commandWindowState","platform","CH","index","type","placeholder","setPlaceHolder","rowIndex","setRowIndex","height","beforeInput","setBeforeInput","commandWindow","setCommandWindow","commandInputList","setCommandInputList","ref","onChangeInput","e","nativeEvent","data","includes","left","top","current","heightCommand","visible","slice","content","target","value","onBlur","onFocus","style","fontSize","fontWeight","width","border","color","resize","fontFamily","overflow","outline"],"mappings":"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","sourcesContent":["import { GRAY7, SCREEN_WIDTH } from \"../../../style\";\nimport { useState, useCallback, useRef } from \"react\";\nimport TextareaAutosize from \"react-autosize-textarea\";\nimport { offset } from \"caret-pos\";\nimport { useRecoilState } from \"recoil\";\nimport { commandInputListState, commandWindowState } from \"../../recoil\";\nimport { platform } from './CTextarea';\n\nexport const CH = ({ index, type = \"h1\" }) => {\n  const [placeholder, setPlaceHolder] = useState(\"\");\n  const [rowIndex, setRowIndex] = useState({ height: 0, index: 0 });\n  const [beforeInput, setBeforeInput] = useState(\"\");\n  const [commandWindow, setCommandWindow] = useRecoilState(commandWindowState);\n  const [commandInputList, setCommandInputList] = useRecoilState(commandInputListState);\n\n  const ref = useRef();\n  const onChangeInput = useCallback(\n    (e) => {\n      //#region #누르면 명령어창 보여줌 || 안드로이드 설정(한번에 여러개들어옴)\n      if (\n        e.nativeEvent.data == \"#\" ||\n        (platform === \"android\" && !!e.nativeEvent.data && e.nativeEvent.data.includes(\"#\"))\n      ) {\n        let { left, top, height } = offset(ref.current);\n        //#region 가로이동 제한 & height 화면 안 넘어가게 제한\n        // 가로제한\n        if (left + 260 > SCREEN_WIDTH && left < 260) {\n          left = commandWindow.left;\n        } else if (SCREEN_WIDTH - left < 260 && left > 260) left -= 280;\n        // 세로제한\n        let heightCommand = 448;\n        top -= heightCommand;\n        if (top < 0) {\n          heightCommand += top - height;\n          top = 0;\n        }\n        //#endregion\n        setCommandWindow({\n          visible: true,\n          top: top,\n          left: left,\n          index: index,\n          height: heightCommand,\n        });\n      } else {\n        setCommandWindow({ ...commandWindow, visible: false, index: -1, height: 0 });\n      }\n      //#region 내용업데이트\n      setCommandInputList([\n        ...commandInputList.slice(0, index),\n        { ...commandInputList[index], content: e.target.value },\n        ...commandInputList.slice(index + 1, 999),\n      ]);\n      //#endregion\n      setBeforeInput(e.target.value);\n      //#endregion #누르면 명령어창 보여줌\n    },\n    [rowIndex, beforeInput, commandWindow, index]\n  );\n  const onBlur = () => {\n    setPlaceHolder(\"\");\n  };\n  const onFocus = () => {\n    if (commandWindow.index != index) {\n      if (commandWindow.visible) setCommandWindow({ ...commandWindow, visible: false, index: index });\n      else setCommandWindow({ ...commandWindow, index: index });\n    }\n    setPlaceHolder('명령어 사용시 \"#\"을 입력하세요.');\n  };\n\n  const style =\n    type == \"h1\" ? { fontSize: 21, fontWeight: \"bold\" } : type == \"h2\" ? { fontSize: 18 } : { fontSize: 16 };\n  return (\n    <TextareaAutosize\n      ref={ref}\n      onFocus={onFocus}\n      onChange={onChangeInput}\n      placeholder={placeholder}\n      onBlur={onBlur}\n      defaultValue={commandInputList[index].content}\n      style={{\n        ...style,\n        width: SCREEN_WIDTH - 60,\n        height: \"20px\",\n        border: \"none\",\n        color: GRAY7,\n        resize: \"none\",\n        fontFamily: \"AppleSDGothic\",\n        overflow: \"hidden\",\n        outline: \"none\",\n      }}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}