{"ast":null,"code":"import { __assign, __read, __spreadArray } from './_virtual/_tslib.js';\nimport { IS_PRODUCTION } from './environment.js';\nimport { isFunction, toEventObject, getEventType, toSCXMLEvent, isString, partition, updateContext, flatten, toArray, toGuard, evaluateGuard, warn, isArray } from './utils.js';\nimport { SpecialTargets, ActionTypes } from './types.js';\nimport { send as send$1, update, assign as assign$1, init, raise as raise$1, log as log$1, cancel as cancel$1, error as error$1, stop as stop$1, pure as pure$1, choose as choose$1 } from './actionTypes.js';\nvar initEvent = /*#__PURE__*/toSCXMLEvent({\n  type: init\n});\n\nfunction getActionFunction(actionType, actionFunctionMap) {\n  return actionFunctionMap ? actionFunctionMap[actionType] || undefined : undefined;\n}\n\nfunction toActionObject(action, actionFunctionMap) {\n  var actionObject;\n\n  if (isString(action) || typeof action === 'number') {\n    var exec = getActionFunction(action, actionFunctionMap);\n\n    if (isFunction(exec)) {\n      actionObject = {\n        type: action,\n        exec: exec\n      };\n    } else if (exec) {\n      actionObject = exec;\n    } else {\n      actionObject = {\n        type: action,\n        exec: undefined\n      };\n    }\n  } else if (isFunction(action)) {\n    actionObject = {\n      // Convert action to string if unnamed\n      type: action.name || action.toString(),\n      exec: action\n    };\n  } else {\n    var exec = getActionFunction(action.type, actionFunctionMap);\n\n    if (isFunction(exec)) {\n      actionObject = __assign(__assign({}, action), {\n        exec: exec\n      });\n    } else if (exec) {\n      var actionType = exec.type || action.type;\n      actionObject = __assign(__assign(__assign({}, exec), action), {\n        type: actionType\n      });\n    } else {\n      actionObject = action;\n    }\n  }\n\n  return actionObject;\n}\n\nvar toActionObjects = function (action, actionFunctionMap) {\n  if (!action) {\n    return [];\n  }\n\n  var actions = isArray(action) ? action : [action];\n  return actions.map(function (subAction) {\n    return toActionObject(subAction, actionFunctionMap);\n  });\n};\n\nfunction toActivityDefinition(action) {\n  var actionObject = toActionObject(action);\n  return __assign(__assign({\n    id: isString(action) ? action : actionObject.id\n  }, actionObject), {\n    type: actionObject.type\n  });\n}\n/**\r\n * Raises an event. This places the event in the internal event queue, so that\r\n * the event is immediately consumed by the machine in the current step.\r\n *\r\n * @param eventType The event to raise.\r\n */\n\n\nfunction raise(event) {\n  if (!isString(event)) {\n    return send(event, {\n      to: SpecialTargets.Internal\n    });\n  }\n\n  return {\n    type: raise$1,\n    event: event\n  };\n}\n\nfunction resolveRaise(action) {\n  return {\n    type: raise$1,\n    _event: toSCXMLEvent(action.event)\n  };\n}\n/**\r\n * Sends an event. This returns an action that will be read by an interpreter to\r\n * send the event in the next step, after the current step is finished executing.\r\n *\r\n * @param event The event to send.\r\n * @param options Options to pass into the send event:\r\n *  - `id` - The unique send event identifier (used with `cancel()`).\r\n *  - `delay` - The number of milliseconds to delay the sending of the event.\r\n *  - `to` - The target of this event (by default, the machine the event was sent from).\r\n */\n\n\nfunction send(event, options) {\n  return {\n    to: options ? options.to : undefined,\n    type: send$1,\n    event: isFunction(event) ? event : toEventObject(event),\n    delay: options ? options.delay : undefined,\n    id: options && options.id !== undefined ? options.id : isFunction(event) ? event.name : getEventType(event)\n  };\n}\n\nfunction resolveSend(action, ctx, _event, delaysMap) {\n  var meta = {\n    _event: _event\n  }; // TODO: helper function for resolving Expr\n\n  var resolvedEvent = toSCXMLEvent(isFunction(action.event) ? action.event(ctx, _event.data, meta) : action.event);\n  var resolvedDelay;\n\n  if (isString(action.delay)) {\n    var configDelay = delaysMap && delaysMap[action.delay];\n    resolvedDelay = isFunction(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;\n  } else {\n    resolvedDelay = isFunction(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;\n  }\n\n  var resolvedTarget = isFunction(action.to) ? action.to(ctx, _event.data, meta) : action.to;\n  return __assign(__assign({}, action), {\n    to: resolvedTarget,\n    _event: resolvedEvent,\n    event: resolvedEvent.data,\n    delay: resolvedDelay\n  });\n}\n/**\r\n * Sends an event to this machine's parent.\r\n *\r\n * @param event The event to send to the parent machine.\r\n * @param options Options to pass into the send event.\r\n */\n\n\nfunction sendParent(event, options) {\n  return send(event, __assign(__assign({}, options), {\n    to: SpecialTargets.Parent\n  }));\n}\n/**\r\n * Sends an update event to this machine's parent.\r\n */\n\n\nfunction sendUpdate() {\n  return sendParent(update);\n}\n/**\r\n * Sends an event back to the sender of the original event.\r\n *\r\n * @param event The event to send back to the sender\r\n * @param options Options to pass into the send event\r\n */\n\n\nfunction respond(event, options) {\n  return send(event, __assign(__assign({}, options), {\n    to: function (_, __, _a) {\n      var _event = _a._event;\n      return _event.origin; // TODO: handle when _event.origin is undefined\n    }\n  }));\n}\n\nvar defaultLogExpr = function (context, event) {\n  return {\n    context: context,\n    event: event\n  };\n};\n/**\r\n *\r\n * @param expr The expression function to evaluate which will be logged.\r\n *  Takes in 2 arguments:\r\n *  - `ctx` - the current state context\r\n *  - `event` - the event that caused this action to be executed.\r\n * @param label The label to give to the logged expression.\r\n */\n\n\nfunction log(expr, label) {\n  if (expr === void 0) {\n    expr = defaultLogExpr;\n  }\n\n  return {\n    type: log$1,\n    label: label,\n    expr: expr\n  };\n}\n\nvar resolveLog = function (action, ctx, _event) {\n  return __assign(__assign({}, action), {\n    value: isString(action.expr) ? action.expr : action.expr(ctx, _event.data, {\n      _event: _event\n    })\n  });\n};\n/**\r\n * Cancels an in-flight `send(...)` action. A canceled sent action will not\r\n * be executed, nor will its event be sent, unless it has already been sent\r\n * (e.g., if `cancel(...)` is called after the `send(...)` action's `delay`).\r\n *\r\n * @param sendId The `id` of the `send(...)` action to cancel.\r\n */\n\n\nvar cancel = function (sendId) {\n  return {\n    type: cancel$1,\n    sendId: sendId\n  };\n};\n/**\r\n * Starts an activity.\r\n *\r\n * @param activity The activity to start.\r\n */\n\n\nfunction start(activity) {\n  var activityDef = toActivityDefinition(activity);\n  return {\n    type: ActionTypes.Start,\n    activity: activityDef,\n    exec: undefined\n  };\n}\n/**\r\n * Stops an activity.\r\n *\r\n * @param actorRef The activity to stop.\r\n */\n\n\nfunction stop(actorRef) {\n  var activity = isFunction(actorRef) ? actorRef : toActivityDefinition(actorRef);\n  return {\n    type: ActionTypes.Stop,\n    activity: activity,\n    exec: undefined\n  };\n}\n\nfunction resolveStop(action, context, _event) {\n  var actorRefOrString = isFunction(action.activity) ? action.activity(context, _event.data) : action.activity;\n  var resolvedActorRef = typeof actorRefOrString === 'string' ? {\n    id: actorRefOrString\n  } : actorRefOrString;\n  var actionObject = {\n    type: ActionTypes.Stop,\n    activity: resolvedActorRef\n  };\n  return actionObject;\n}\n/**\r\n * Updates the current context of the machine.\r\n *\r\n * @param assignment An object that represents the partial context to update.\r\n */\n\n\nvar assign = function (assignment) {\n  return {\n    type: assign$1,\n    assignment: assignment\n  };\n};\n/**\r\n * Returns an event type that represents an implicit event that\r\n * is sent after the specified `delay`.\r\n *\r\n * @param delayRef The delay in milliseconds\r\n * @param id The state node ID where this event is handled\r\n */\n\n\nfunction after(delayRef, id) {\n  var idSuffix = id ? \"#\" + id : '';\n  return ActionTypes.After + \"(\" + delayRef + \")\" + idSuffix;\n}\n/**\r\n * Returns an event that represents that a final state node\r\n * has been reached in the parent state node.\r\n *\r\n * @param id The final state node's parent state node `id`\r\n * @param data The data to pass into the event\r\n */\n\n\nfunction done(id, data) {\n  var type = ActionTypes.DoneState + \".\" + id;\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\n/**\r\n * Returns an event that represents that an invoked service has terminated.\r\n *\r\n * An invoked service is terminated when it has reached a top-level final state node,\r\n * but not when it is canceled.\r\n *\r\n * @param id The final state node ID\r\n * @param data The data to pass into the event\r\n */\n\n\nfunction doneInvoke(id, data) {\n  var type = ActionTypes.DoneInvoke + \".\" + id;\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\n\nfunction error(id, data) {\n  var type = ActionTypes.ErrorPlatform + \".\" + id;\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\n\nfunction pure(getActions) {\n  return {\n    type: ActionTypes.Pure,\n    get: getActions\n  };\n}\n/**\r\n * Forwards (sends) an event to a specified service.\r\n *\r\n * @param target The target service to forward the event to.\r\n * @param options Options to pass into the send action creator.\r\n */\n\n\nfunction forwardTo(target, options) {\n  return send(function (_, event) {\n    return event;\n  }, __assign(__assign({}, options), {\n    to: target\n  }));\n}\n/**\r\n * Escalates an error by sending it as an event to this machine's parent.\r\n *\r\n * @param errorData The error data to send, or the expression function that\r\n * takes in the `context`, `event`, and `meta`, and returns the error data to send.\r\n * @param options Options to pass into the send action creator.\r\n */\n\n\nfunction escalate(errorData, options) {\n  return sendParent(function (context, event, meta) {\n    return {\n      type: error$1,\n      data: isFunction(errorData) ? errorData(context, event, meta) : errorData\n    };\n  }, __assign(__assign({}, options), {\n    to: SpecialTargets.Parent\n  }));\n}\n\nfunction choose(conds) {\n  return {\n    type: ActionTypes.Choose,\n    conds: conds\n  };\n}\n\nfunction resolveActions(machine, currentState, currentContext, _event, actions, preserveActionOrder) {\n  if (preserveActionOrder === void 0) {\n    preserveActionOrder = false;\n  }\n\n  var _a = __read(preserveActionOrder ? [[], actions] : partition(actions, function (action) {\n    return action.type === assign$1;\n  }), 2),\n      assignActions = _a[0],\n      otherActions = _a[1];\n\n  var updatedContext = assignActions.length ? updateContext(currentContext, _event, assignActions, currentState) : currentContext;\n  var preservedContexts = preserveActionOrder ? [currentContext] : undefined;\n  var resolvedActions = flatten(otherActions.map(function (actionObject) {\n    var _a;\n\n    switch (actionObject.type) {\n      case raise$1:\n        return resolveRaise(actionObject);\n\n      case send$1:\n        var sendAction = resolveSend(actionObject, updatedContext, _event, machine.options.delays); // TODO: fix ActionTypes.Init\n\n        if (!IS_PRODUCTION) {\n          // warn after resolving as we can create better contextual message here\n          warn(!isString(actionObject.delay) || typeof sendAction.delay === 'number', // tslint:disable-next-line:max-line-length\n          \"No delay reference for delay expression '\" + actionObject.delay + \"' was found on machine '\" + machine.id + \"'\");\n        }\n\n        return sendAction;\n\n      case log$1:\n        return resolveLog(actionObject, updatedContext, _event);\n\n      case choose$1:\n        {\n          var chooseAction = actionObject;\n          var matchedActions = (_a = chooseAction.conds.find(function (condition) {\n            var guard = toGuard(condition.cond, machine.options.guards);\n            return !guard || evaluateGuard(machine, guard, updatedContext, _event, currentState);\n          })) === null || _a === void 0 ? void 0 : _a.actions;\n\n          if (!matchedActions) {\n            return [];\n          }\n\n          var _b = __read(resolveActions(machine, currentState, updatedContext, _event, toActionObjects(toArray(matchedActions), machine.options.actions), preserveActionOrder), 2),\n              resolvedActionsFromChoose = _b[0],\n              resolvedContextFromChoose = _b[1];\n\n          updatedContext = resolvedContextFromChoose;\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          return resolvedActionsFromChoose;\n        }\n\n      case pure$1:\n        {\n          var matchedActions = actionObject.get(updatedContext, _event.data);\n\n          if (!matchedActions) {\n            return [];\n          }\n\n          var _c = __read(resolveActions(machine, currentState, updatedContext, _event, toActionObjects(toArray(matchedActions), machine.options.actions), preserveActionOrder), 2),\n              resolvedActionsFromPure = _c[0],\n              resolvedContext = _c[1];\n\n          updatedContext = resolvedContext;\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          return resolvedActionsFromPure;\n        }\n\n      case stop$1:\n        {\n          return resolveStop(actionObject, updatedContext, _event);\n        }\n\n      case assign$1:\n        {\n          updatedContext = updateContext(updatedContext, _event, [actionObject], currentState);\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          break;\n        }\n\n      default:\n        var resolvedActionObject = toActionObject(actionObject, machine.options.actions);\n        var exec_1 = resolvedActionObject.exec;\n\n        if (exec_1 && preservedContexts) {\n          var contextIndex_1 = preservedContexts.length - 1;\n          resolvedActionObject = __assign(__assign({}, resolvedActionObject), {\n            exec: function (_ctx) {\n              var args = [];\n\n              for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n              }\n\n              exec_1.apply(void 0, __spreadArray([preservedContexts[contextIndex_1]], __read(args)));\n            }\n          });\n        }\n\n        return resolvedActionObject;\n    }\n  }).filter(function (a) {\n    return !!a;\n  }));\n  return [resolvedActions, updatedContext];\n}\n\nexport { after, assign, cancel, choose, done, doneInvoke, error, escalate, forwardTo, getActionFunction, initEvent, log, pure, raise, resolveActions, resolveLog, resolveRaise, resolveSend, resolveStop, respond, send, sendParent, sendUpdate, start, stop, toActionObject, toActionObjects, toActivityDefinition };","map":{"version":3,"sources":["/Users/macbook/_myProject/campustaxi-2-webview/node_modules/xstate/es/actions.js"],"names":["__assign","__read","__spreadArray","IS_PRODUCTION","isFunction","toEventObject","getEventType","toSCXMLEvent","isString","partition","updateContext","flatten","toArray","toGuard","evaluateGuard","warn","isArray","SpecialTargets","ActionTypes","send","send$1","update","assign","assign$1","init","raise","raise$1","log","log$1","cancel","cancel$1","error","error$1","stop","stop$1","pure","pure$1","choose","choose$1","initEvent","type","getActionFunction","actionType","actionFunctionMap","undefined","toActionObject","action","actionObject","exec","name","toString","toActionObjects","actions","map","subAction","toActivityDefinition","id","event","to","Internal","resolveRaise","_event","options","delay","resolveSend","ctx","delaysMap","meta","resolvedEvent","data","resolvedDelay","configDelay","resolvedTarget","sendParent","Parent","sendUpdate","respond","_","__","_a","origin","defaultLogExpr","context","expr","label","resolveLog","value","sendId","start","activity","activityDef","Start","actorRef","Stop","resolveStop","actorRefOrString","resolvedActorRef","assignment","after","delayRef","idSuffix","After","done","DoneState","eventObject","doneInvoke","DoneInvoke","ErrorPlatform","getActions","Pure","get","forwardTo","target","escalate","errorData","conds","Choose","resolveActions","machine","currentState","currentContext","preserveActionOrder","assignActions","otherActions","updatedContext","length","preservedContexts","resolvedActions","sendAction","delays","chooseAction","matchedActions","find","condition","guard","cond","guards","_b","resolvedActionsFromChoose","resolvedContextFromChoose","push","_c","resolvedActionsFromPure","resolvedContext","resolvedActionObject","exec_1","contextIndex_1","_ctx","args","_i","arguments","apply","filter","a"],"mappings":"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","sourcesContent":["import { __assign, __read, __spreadArray } from './_virtual/_tslib.js';\nimport { IS_PRODUCTION } from './environment.js';\nimport { isFunction, toEventObject, getEventType, toSCXMLEvent, isString, partition, updateContext, flatten, toArray, toGuard, evaluateGuard, warn, isArray } from './utils.js';\nimport { SpecialTargets, ActionTypes } from './types.js';\nimport { send as send$1, update, assign as assign$1, init, raise as raise$1, log as log$1, cancel as cancel$1, error as error$1, stop as stop$1, pure as pure$1, choose as choose$1 } from './actionTypes.js';\n\nvar initEvent = /*#__PURE__*/toSCXMLEvent({\n  type: init\n});\nfunction getActionFunction(actionType, actionFunctionMap) {\n  return actionFunctionMap ? actionFunctionMap[actionType] || undefined : undefined;\n}\nfunction toActionObject(action, actionFunctionMap) {\n  var actionObject;\n\n  if (isString(action) || typeof action === 'number') {\n    var exec = getActionFunction(action, actionFunctionMap);\n\n    if (isFunction(exec)) {\n      actionObject = {\n        type: action,\n        exec: exec\n      };\n    } else if (exec) {\n      actionObject = exec;\n    } else {\n      actionObject = {\n        type: action,\n        exec: undefined\n      };\n    }\n  } else if (isFunction(action)) {\n    actionObject = {\n      // Convert action to string if unnamed\n      type: action.name || action.toString(),\n      exec: action\n    };\n  } else {\n    var exec = getActionFunction(action.type, actionFunctionMap);\n\n    if (isFunction(exec)) {\n      actionObject = __assign(__assign({}, action), {\n        exec: exec\n      });\n    } else if (exec) {\n      var actionType = exec.type || action.type;\n      actionObject = __assign(__assign(__assign({}, exec), action), {\n        type: actionType\n      });\n    } else {\n      actionObject = action;\n    }\n  }\n\n  return actionObject;\n}\nvar toActionObjects = function (action, actionFunctionMap) {\n  if (!action) {\n    return [];\n  }\n\n  var actions = isArray(action) ? action : [action];\n  return actions.map(function (subAction) {\n    return toActionObject(subAction, actionFunctionMap);\n  });\n};\nfunction toActivityDefinition(action) {\n  var actionObject = toActionObject(action);\n  return __assign(__assign({\n    id: isString(action) ? action : actionObject.id\n  }, actionObject), {\n    type: actionObject.type\n  });\n}\n/**\r\n * Raises an event. This places the event in the internal event queue, so that\r\n * the event is immediately consumed by the machine in the current step.\r\n *\r\n * @param eventType The event to raise.\r\n */\n\nfunction raise(event) {\n  if (!isString(event)) {\n    return send(event, {\n      to: SpecialTargets.Internal\n    });\n  }\n\n  return {\n    type: raise$1,\n    event: event\n  };\n}\nfunction resolveRaise(action) {\n  return {\n    type: raise$1,\n    _event: toSCXMLEvent(action.event)\n  };\n}\n/**\r\n * Sends an event. This returns an action that will be read by an interpreter to\r\n * send the event in the next step, after the current step is finished executing.\r\n *\r\n * @param event The event to send.\r\n * @param options Options to pass into the send event:\r\n *  - `id` - The unique send event identifier (used with `cancel()`).\r\n *  - `delay` - The number of milliseconds to delay the sending of the event.\r\n *  - `to` - The target of this event (by default, the machine the event was sent from).\r\n */\n\nfunction send(event, options) {\n  return {\n    to: options ? options.to : undefined,\n    type: send$1,\n    event: isFunction(event) ? event : toEventObject(event),\n    delay: options ? options.delay : undefined,\n    id: options && options.id !== undefined ? options.id : isFunction(event) ? event.name : getEventType(event)\n  };\n}\nfunction resolveSend(action, ctx, _event, delaysMap) {\n  var meta = {\n    _event: _event\n  }; // TODO: helper function for resolving Expr\n\n  var resolvedEvent = toSCXMLEvent(isFunction(action.event) ? action.event(ctx, _event.data, meta) : action.event);\n  var resolvedDelay;\n\n  if (isString(action.delay)) {\n    var configDelay = delaysMap && delaysMap[action.delay];\n    resolvedDelay = isFunction(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;\n  } else {\n    resolvedDelay = isFunction(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;\n  }\n\n  var resolvedTarget = isFunction(action.to) ? action.to(ctx, _event.data, meta) : action.to;\n  return __assign(__assign({}, action), {\n    to: resolvedTarget,\n    _event: resolvedEvent,\n    event: resolvedEvent.data,\n    delay: resolvedDelay\n  });\n}\n/**\r\n * Sends an event to this machine's parent.\r\n *\r\n * @param event The event to send to the parent machine.\r\n * @param options Options to pass into the send event.\r\n */\n\nfunction sendParent(event, options) {\n  return send(event, __assign(__assign({}, options), {\n    to: SpecialTargets.Parent\n  }));\n}\n/**\r\n * Sends an update event to this machine's parent.\r\n */\n\nfunction sendUpdate() {\n  return sendParent(update);\n}\n/**\r\n * Sends an event back to the sender of the original event.\r\n *\r\n * @param event The event to send back to the sender\r\n * @param options Options to pass into the send event\r\n */\n\nfunction respond(event, options) {\n  return send(event, __assign(__assign({}, options), {\n    to: function (_, __, _a) {\n      var _event = _a._event;\n      return _event.origin; // TODO: handle when _event.origin is undefined\n    }\n  }));\n}\n\nvar defaultLogExpr = function (context, event) {\n  return {\n    context: context,\n    event: event\n  };\n};\n/**\r\n *\r\n * @param expr The expression function to evaluate which will be logged.\r\n *  Takes in 2 arguments:\r\n *  - `ctx` - the current state context\r\n *  - `event` - the event that caused this action to be executed.\r\n * @param label The label to give to the logged expression.\r\n */\n\n\nfunction log(expr, label) {\n  if (expr === void 0) {\n    expr = defaultLogExpr;\n  }\n\n  return {\n    type: log$1,\n    label: label,\n    expr: expr\n  };\n}\nvar resolveLog = function (action, ctx, _event) {\n  return __assign(__assign({}, action), {\n    value: isString(action.expr) ? action.expr : action.expr(ctx, _event.data, {\n      _event: _event\n    })\n  });\n};\n/**\r\n * Cancels an in-flight `send(...)` action. A canceled sent action will not\r\n * be executed, nor will its event be sent, unless it has already been sent\r\n * (e.g., if `cancel(...)` is called after the `send(...)` action's `delay`).\r\n *\r\n * @param sendId The `id` of the `send(...)` action to cancel.\r\n */\n\nvar cancel = function (sendId) {\n  return {\n    type: cancel$1,\n    sendId: sendId\n  };\n};\n/**\r\n * Starts an activity.\r\n *\r\n * @param activity The activity to start.\r\n */\n\nfunction start(activity) {\n  var activityDef = toActivityDefinition(activity);\n  return {\n    type: ActionTypes.Start,\n    activity: activityDef,\n    exec: undefined\n  };\n}\n/**\r\n * Stops an activity.\r\n *\r\n * @param actorRef The activity to stop.\r\n */\n\nfunction stop(actorRef) {\n  var activity = isFunction(actorRef) ? actorRef : toActivityDefinition(actorRef);\n  return {\n    type: ActionTypes.Stop,\n    activity: activity,\n    exec: undefined\n  };\n}\nfunction resolveStop(action, context, _event) {\n  var actorRefOrString = isFunction(action.activity) ? action.activity(context, _event.data) : action.activity;\n  var resolvedActorRef = typeof actorRefOrString === 'string' ? {\n    id: actorRefOrString\n  } : actorRefOrString;\n  var actionObject = {\n    type: ActionTypes.Stop,\n    activity: resolvedActorRef\n  };\n  return actionObject;\n}\n/**\r\n * Updates the current context of the machine.\r\n *\r\n * @param assignment An object that represents the partial context to update.\r\n */\n\nvar assign = function (assignment) {\n  return {\n    type: assign$1,\n    assignment: assignment\n  };\n};\n/**\r\n * Returns an event type that represents an implicit event that\r\n * is sent after the specified `delay`.\r\n *\r\n * @param delayRef The delay in milliseconds\r\n * @param id The state node ID where this event is handled\r\n */\n\nfunction after(delayRef, id) {\n  var idSuffix = id ? \"#\" + id : '';\n  return ActionTypes.After + \"(\" + delayRef + \")\" + idSuffix;\n}\n/**\r\n * Returns an event that represents that a final state node\r\n * has been reached in the parent state node.\r\n *\r\n * @param id The final state node's parent state node `id`\r\n * @param data The data to pass into the event\r\n */\n\nfunction done(id, data) {\n  var type = ActionTypes.DoneState + \".\" + id;\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\n/**\r\n * Returns an event that represents that an invoked service has terminated.\r\n *\r\n * An invoked service is terminated when it has reached a top-level final state node,\r\n * but not when it is canceled.\r\n *\r\n * @param id The final state node ID\r\n * @param data The data to pass into the event\r\n */\n\nfunction doneInvoke(id, data) {\n  var type = ActionTypes.DoneInvoke + \".\" + id;\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\nfunction error(id, data) {\n  var type = ActionTypes.ErrorPlatform + \".\" + id;\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\nfunction pure(getActions) {\n  return {\n    type: ActionTypes.Pure,\n    get: getActions\n  };\n}\n/**\r\n * Forwards (sends) an event to a specified service.\r\n *\r\n * @param target The target service to forward the event to.\r\n * @param options Options to pass into the send action creator.\r\n */\n\nfunction forwardTo(target, options) {\n  return send(function (_, event) {\n    return event;\n  }, __assign(__assign({}, options), {\n    to: target\n  }));\n}\n/**\r\n * Escalates an error by sending it as an event to this machine's parent.\r\n *\r\n * @param errorData The error data to send, or the expression function that\r\n * takes in the `context`, `event`, and `meta`, and returns the error data to send.\r\n * @param options Options to pass into the send action creator.\r\n */\n\nfunction escalate(errorData, options) {\n  return sendParent(function (context, event, meta) {\n    return {\n      type: error$1,\n      data: isFunction(errorData) ? errorData(context, event, meta) : errorData\n    };\n  }, __assign(__assign({}, options), {\n    to: SpecialTargets.Parent\n  }));\n}\nfunction choose(conds) {\n  return {\n    type: ActionTypes.Choose,\n    conds: conds\n  };\n}\nfunction resolveActions(machine, currentState, currentContext, _event, actions, preserveActionOrder) {\n  if (preserveActionOrder === void 0) {\n    preserveActionOrder = false;\n  }\n\n  var _a = __read(preserveActionOrder ? [[], actions] : partition(actions, function (action) {\n    return action.type === assign$1;\n  }), 2),\n      assignActions = _a[0],\n      otherActions = _a[1];\n\n  var updatedContext = assignActions.length ? updateContext(currentContext, _event, assignActions, currentState) : currentContext;\n  var preservedContexts = preserveActionOrder ? [currentContext] : undefined;\n  var resolvedActions = flatten(otherActions.map(function (actionObject) {\n    var _a;\n\n    switch (actionObject.type) {\n      case raise$1:\n        return resolveRaise(actionObject);\n\n      case send$1:\n        var sendAction = resolveSend(actionObject, updatedContext, _event, machine.options.delays); // TODO: fix ActionTypes.Init\n\n        if (!IS_PRODUCTION) {\n          // warn after resolving as we can create better contextual message here\n          warn(!isString(actionObject.delay) || typeof sendAction.delay === 'number', // tslint:disable-next-line:max-line-length\n          \"No delay reference for delay expression '\" + actionObject.delay + \"' was found on machine '\" + machine.id + \"'\");\n        }\n\n        return sendAction;\n\n      case log$1:\n        return resolveLog(actionObject, updatedContext, _event);\n\n      case choose$1:\n        {\n          var chooseAction = actionObject;\n          var matchedActions = (_a = chooseAction.conds.find(function (condition) {\n            var guard = toGuard(condition.cond, machine.options.guards);\n            return !guard || evaluateGuard(machine, guard, updatedContext, _event, currentState);\n          })) === null || _a === void 0 ? void 0 : _a.actions;\n\n          if (!matchedActions) {\n            return [];\n          }\n\n          var _b = __read(resolveActions(machine, currentState, updatedContext, _event, toActionObjects(toArray(matchedActions), machine.options.actions), preserveActionOrder), 2),\n              resolvedActionsFromChoose = _b[0],\n              resolvedContextFromChoose = _b[1];\n\n          updatedContext = resolvedContextFromChoose;\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          return resolvedActionsFromChoose;\n        }\n\n      case pure$1:\n        {\n          var matchedActions = actionObject.get(updatedContext, _event.data);\n\n          if (!matchedActions) {\n            return [];\n          }\n\n          var _c = __read(resolveActions(machine, currentState, updatedContext, _event, toActionObjects(toArray(matchedActions), machine.options.actions), preserveActionOrder), 2),\n              resolvedActionsFromPure = _c[0],\n              resolvedContext = _c[1];\n\n          updatedContext = resolvedContext;\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          return resolvedActionsFromPure;\n        }\n\n      case stop$1:\n        {\n          return resolveStop(actionObject, updatedContext, _event);\n        }\n\n      case assign$1:\n        {\n          updatedContext = updateContext(updatedContext, _event, [actionObject], currentState);\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          break;\n        }\n\n      default:\n        var resolvedActionObject = toActionObject(actionObject, machine.options.actions);\n        var exec_1 = resolvedActionObject.exec;\n\n        if (exec_1 && preservedContexts) {\n          var contextIndex_1 = preservedContexts.length - 1;\n          resolvedActionObject = __assign(__assign({}, resolvedActionObject), {\n            exec: function (_ctx) {\n              var args = [];\n\n              for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n              }\n\n              exec_1.apply(void 0, __spreadArray([preservedContexts[contextIndex_1]], __read(args)));\n            }\n          });\n        }\n\n        return resolvedActionObject;\n    }\n  }).filter(function (a) {\n    return !!a;\n  }));\n  return [resolvedActions, updatedContext];\n}\n\nexport { after, assign, cancel, choose, done, doneInvoke, error, escalate, forwardTo, getActionFunction, initEvent, log, pure, raise, resolveActions, resolveLog, resolveRaise, resolveSend, resolveStop, respond, send, sendParent, sendUpdate, start, stop, toActionObject, toActionObjects, toActivityDefinition };\n"]},"metadata":{},"sourceType":"module"}