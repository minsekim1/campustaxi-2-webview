{"ast":null,"code":"import { __assign } from './_virtual/_tslib.js';\nimport { toInvokeSource, mapContext, isMachine } from './utils.js';\nimport { provide } from './serviceScope.js';\n\nfunction createNullActor(id) {\n  return {\n    id: id,\n    send: function () {\n      return void 0;\n    },\n    subscribe: function () {\n      return {\n        unsubscribe: function () {\n          return void 0;\n        }\n      };\n    },\n    getSnapshot: function () {\n      return undefined;\n    },\n    toJSON: function () {\n      return {\n        id: id\n      };\n    }\n  };\n}\n/**\r\n * Creates a deferred actor that is able to be invoked given the provided\r\n * invocation information in its `.meta` value.\r\n *\r\n * @param invokeDefinition The meta information needed to invoke the actor.\r\n */\n\n\nfunction createInvocableActor(invokeDefinition, machine, context, _event) {\n  var _a;\n\n  var invokeSrc = toInvokeSource(invokeDefinition.src);\n  var serviceCreator = (_a = machine === null || machine === void 0 ? void 0 : machine.options.services) === null || _a === void 0 ? void 0 : _a[invokeSrc.type];\n  var resolvedData = invokeDefinition.data ? mapContext(invokeDefinition.data, context, _event) : undefined;\n  var tempActor = serviceCreator ? createDeferredActor(serviceCreator, invokeDefinition.id, resolvedData) : createNullActor(invokeDefinition.id); // @ts-ignore\n\n  tempActor.meta = invokeDefinition;\n  return tempActor;\n}\n\nfunction createDeferredActor(entity, id, data) {\n  var tempActor = createNullActor(id); // @ts-ignore\n\n  tempActor.deferred = true;\n\n  if (isMachine(entity)) {\n    // \"mute\" the existing service scope so potential spawned actors within the `.initialState` stay deferred here\n    var initialState_1 = tempActor.state = provide(undefined, function () {\n      return (data ? entity.withContext(data) : entity).initialState;\n    });\n\n    tempActor.getSnapshot = function () {\n      return initialState_1;\n    };\n  }\n\n  return tempActor;\n}\n\nfunction isActor(item) {\n  try {\n    return typeof item.send === 'function';\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction isSpawnedActor(item) {\n  return isActor(item) && 'id' in item;\n}\n\nfunction toActorRef(actorRefLike) {\n  return __assign({\n    subscribe: function () {\n      return {\n        unsubscribe: function () {\n          return void 0;\n        }\n      };\n    },\n    id: 'anonymous',\n    getSnapshot: function () {\n      return undefined;\n    }\n  }, actorRefLike);\n}\n\nexport { createDeferredActor, createInvocableActor, createNullActor, isActor, isSpawnedActor, toActorRef };","map":{"version":3,"sources":["/Users/macbook/_myProject/campustaxi-2-webview/node_modules/xstate/es/Actor.js"],"names":["__assign","toInvokeSource","mapContext","isMachine","provide","createNullActor","id","send","subscribe","unsubscribe","getSnapshot","undefined","toJSON","createInvocableActor","invokeDefinition","machine","context","_event","_a","invokeSrc","src","serviceCreator","options","services","type","resolvedData","data","tempActor","createDeferredActor","meta","entity","deferred","initialState_1","state","withContext","initialState","isActor","item","e","isSpawnedActor","toActorRef","actorRefLike"],"mappings":"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","sourcesContent":["import { __assign } from './_virtual/_tslib.js';\nimport { toInvokeSource, mapContext, isMachine } from './utils.js';\nimport { provide } from './serviceScope.js';\n\nfunction createNullActor(id) {\n  return {\n    id: id,\n    send: function () {\n      return void 0;\n    },\n    subscribe: function () {\n      return {\n        unsubscribe: function () {\n          return void 0;\n        }\n      };\n    },\n    getSnapshot: function () {\n      return undefined;\n    },\n    toJSON: function () {\n      return {\n        id: id\n      };\n    }\n  };\n}\n/**\r\n * Creates a deferred actor that is able to be invoked given the provided\r\n * invocation information in its `.meta` value.\r\n *\r\n * @param invokeDefinition The meta information needed to invoke the actor.\r\n */\n\nfunction createInvocableActor(invokeDefinition, machine, context, _event) {\n  var _a;\n\n  var invokeSrc = toInvokeSource(invokeDefinition.src);\n  var serviceCreator = (_a = machine === null || machine === void 0 ? void 0 : machine.options.services) === null || _a === void 0 ? void 0 : _a[invokeSrc.type];\n  var resolvedData = invokeDefinition.data ? mapContext(invokeDefinition.data, context, _event) : undefined;\n  var tempActor = serviceCreator ? createDeferredActor(serviceCreator, invokeDefinition.id, resolvedData) : createNullActor(invokeDefinition.id); // @ts-ignore\n\n  tempActor.meta = invokeDefinition;\n  return tempActor;\n}\nfunction createDeferredActor(entity, id, data) {\n  var tempActor = createNullActor(id); // @ts-ignore\n\n  tempActor.deferred = true;\n\n  if (isMachine(entity)) {\n    // \"mute\" the existing service scope so potential spawned actors within the `.initialState` stay deferred here\n    var initialState_1 = tempActor.state = provide(undefined, function () {\n      return (data ? entity.withContext(data) : entity).initialState;\n    });\n\n    tempActor.getSnapshot = function () {\n      return initialState_1;\n    };\n  }\n\n  return tempActor;\n}\nfunction isActor(item) {\n  try {\n    return typeof item.send === 'function';\n  } catch (e) {\n    return false;\n  }\n}\nfunction isSpawnedActor(item) {\n  return isActor(item) && 'id' in item;\n}\nfunction toActorRef(actorRefLike) {\n  return __assign({\n    subscribe: function () {\n      return {\n        unsubscribe: function () {\n          return void 0;\n        }\n      };\n    },\n    id: 'anonymous',\n    getSnapshot: function () {\n      return undefined;\n    }\n  }, actorRefLike);\n}\n\nexport { createDeferredActor, createInvocableActor, createNullActor, isActor, isSpawnedActor, toActorRef };\n"]},"metadata":{},"sourceType":"module"}