{"ast":null,"code":"import { __spreadArray, __read, __rest, __assign } from './_virtual/_tslib.js';\nimport { EMPTY_ACTIVITY_MAP } from './constants.js';\nimport { IS_PRODUCTION } from './environment.js';\nimport { isString, matchesState, warn, keys } from './utils.js';\nimport { getMeta, nextEvents } from './stateUtils.js';\nimport { initEvent } from './actions.js';\n\nfunction stateValuesEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (a === undefined || b === undefined) {\n    return false;\n  }\n\n  if (isString(a) || isString(b)) {\n    return a === b;\n  }\n\n  var aKeys = keys(a);\n  var bKeys = keys(b);\n  return aKeys.length === bKeys.length && aKeys.every(function (key) {\n    return stateValuesEqual(a[key], b[key]);\n  });\n}\n\nfunction isState(state) {\n  if (isString(state)) {\n    return false;\n  }\n\n  return 'value' in state && 'history' in state;\n}\n\nfunction bindActionToState(action, state) {\n  var exec = action.exec;\n\n  var boundAction = __assign(__assign({}, action), {\n    exec: exec !== undefined ? function () {\n      return exec(state.context, state.event, {\n        action: action,\n        state: state,\n        _event: state._event\n      });\n    } : undefined\n  });\n\n  return boundAction;\n}\n\nvar State =\n/*#__PURE__*/\n\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new State instance.\r\n   * @param value The state value\r\n   * @param context The extended state\r\n   * @param historyValue The tree representing historical values of the state nodes\r\n   * @param history The previous state\r\n   * @param actions An array of action objects to execute as side-effects\r\n   * @param activities A mapping of activities and whether they are started (`true`) or stopped (`false`).\r\n   * @param meta\r\n   * @param events Internal event queue. Should be empty with run-to-completion semantics.\r\n   * @param configuration\r\n   */\n  function State(config) {\n    var _this = this;\n\n    var _a;\n\n    this.actions = [];\n    this.activities = EMPTY_ACTIVITY_MAP;\n    this.meta = {};\n    this.events = [];\n    this.value = config.value;\n    this.context = config.context;\n    this._event = config._event;\n    this._sessionid = config._sessionid;\n    this.event = this._event.data;\n    this.historyValue = config.historyValue;\n    this.history = config.history;\n    this.actions = config.actions || [];\n    this.activities = config.activities || EMPTY_ACTIVITY_MAP;\n    this.meta = getMeta(config.configuration);\n    this.events = config.events || [];\n    this.matches = this.matches.bind(this);\n    this.toStrings = this.toStrings.bind(this);\n    this.configuration = config.configuration;\n    this.transitions = config.transitions;\n    this.children = config.children;\n    this.done = !!config.done;\n    this.tags = (_a = Array.isArray(config.tags) ? new Set(config.tags) : config.tags) !== null && _a !== void 0 ? _a : new Set();\n    this.machine = config.machine;\n    Object.defineProperty(this, 'nextEvents', {\n      get: function () {\n        return nextEvents(_this.configuration);\n      }\n    });\n  }\n  /**\r\n   * Creates a new State instance for the given `stateValue` and `context`.\r\n   * @param stateValue\r\n   * @param context\r\n   */\n\n\n  State.from = function (stateValue, context) {\n    if (stateValue instanceof State) {\n      if (stateValue.context !== context) {\n        return new State({\n          value: stateValue.value,\n          context: context,\n          _event: stateValue._event,\n          _sessionid: null,\n          historyValue: stateValue.historyValue,\n          history: stateValue.history,\n          actions: [],\n          activities: stateValue.activities,\n          meta: {},\n          events: [],\n          configuration: [],\n          transitions: [],\n          children: {}\n        });\n      }\n\n      return stateValue;\n    }\n\n    var _event = initEvent;\n    return new State({\n      value: stateValue,\n      context: context,\n      _event: _event,\n      _sessionid: null,\n      historyValue: undefined,\n      history: undefined,\n      actions: [],\n      activities: undefined,\n      meta: undefined,\n      events: [],\n      configuration: [],\n      transitions: [],\n      children: {}\n    });\n  };\n  /**\r\n   * Creates a new State instance for the given `config`.\r\n   * @param config The state config\r\n   */\n\n\n  State.create = function (config) {\n    return new State(config);\n  };\n  /**\r\n   * Creates a new `State` instance for the given `stateValue` and `context` with no actions (side-effects).\r\n   * @param stateValue\r\n   * @param context\r\n   */\n\n\n  State.inert = function (stateValue, context) {\n    if (stateValue instanceof State) {\n      if (!stateValue.actions.length) {\n        return stateValue;\n      }\n\n      var _event = initEvent;\n      return new State({\n        value: stateValue.value,\n        context: context,\n        _event: _event,\n        _sessionid: null,\n        historyValue: stateValue.historyValue,\n        history: stateValue.history,\n        activities: stateValue.activities,\n        configuration: stateValue.configuration,\n        transitions: [],\n        children: {}\n      });\n    }\n\n    return State.from(stateValue, context);\n  };\n  /**\r\n   * Returns an array of all the string leaf state node paths.\r\n   * @param stateValue\r\n   * @param delimiter The character(s) that separate each subpath in the string state node path.\r\n   */\n\n\n  State.prototype.toStrings = function (stateValue, delimiter) {\n    var _this = this;\n\n    if (stateValue === void 0) {\n      stateValue = this.value;\n    }\n\n    if (delimiter === void 0) {\n      delimiter = '.';\n    }\n\n    if (isString(stateValue)) {\n      return [stateValue];\n    }\n\n    var valueKeys = keys(stateValue);\n    return valueKeys.concat.apply(valueKeys, __spreadArray([], __read(valueKeys.map(function (key) {\n      return _this.toStrings(stateValue[key], delimiter).map(function (s) {\n        return key + delimiter + s;\n      });\n    }))));\n  };\n\n  State.prototype.toJSON = function () {\n    var _a = this,\n        configuration = _a.configuration,\n        transitions = _a.transitions,\n        tags = _a.tags,\n        machine = _a.machine,\n        jsonValues = __rest(_a, [\"configuration\", \"transitions\", \"tags\", \"machine\"]);\n\n    return __assign(__assign({}, jsonValues), {\n      tags: Array.from(tags)\n    });\n  };\n  /**\r\n   * Whether the current state value is a subset of the given parent state value.\r\n   * @param parentStateValue\r\n   */\n\n\n  State.prototype.matches = function (parentStateValue) {\n    return matchesState(parentStateValue, this.value);\n  };\n  /**\r\n   * Whether the current state configuration has a state node with the specified `tag`.\r\n   * @param tag\r\n   */\n\n\n  State.prototype.hasTag = function (tag) {\n    return this.tags.has(tag);\n  };\n  /**\r\n   * Determines whether sending the `event` will cause a transition.\r\n   * @param event The event to test\r\n   * @returns Whether the event will cause a transition\r\n   */\n\n\n  State.prototype.can = function (event) {\n    var _a;\n\n    if (IS_PRODUCTION) {\n      warn(!!this.machine, \"state.can(...) used outside of a machine-created State object; this will always return false.\");\n    }\n\n    return !!((_a = this.machine) === null || _a === void 0 ? void 0 : _a.transition(this, event).changed);\n  };\n\n  return State;\n}();\n\nexport { State, bindActionToState, isState, stateValuesEqual };","map":{"version":3,"sources":["/Users/macbook/_myProject/campustaxi-2-webview/node_modules/xstate/es/State.js"],"names":["__spreadArray","__read","__rest","__assign","EMPTY_ACTIVITY_MAP","IS_PRODUCTION","isString","matchesState","warn","keys","getMeta","nextEvents","initEvent","stateValuesEqual","a","b","undefined","aKeys","bKeys","length","every","key","isState","state","bindActionToState","action","exec","boundAction","context","event","_event","State","config","_this","_a","actions","activities","meta","events","value","_sessionid","data","historyValue","history","configuration","matches","bind","toStrings","transitions","children","done","tags","Array","isArray","Set","machine","Object","defineProperty","get","from","stateValue","create","inert","prototype","delimiter","valueKeys","concat","apply","map","s","toJSON","jsonValues","parentStateValue","hasTag","tag","has","can","transition","changed"],"mappings":"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","sourcesContent":["import { __spreadArray, __read, __rest, __assign } from './_virtual/_tslib.js';\nimport { EMPTY_ACTIVITY_MAP } from './constants.js';\nimport { IS_PRODUCTION } from './environment.js';\nimport { isString, matchesState, warn, keys } from './utils.js';\nimport { getMeta, nextEvents } from './stateUtils.js';\nimport { initEvent } from './actions.js';\n\nfunction stateValuesEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (a === undefined || b === undefined) {\n    return false;\n  }\n\n  if (isString(a) || isString(b)) {\n    return a === b;\n  }\n\n  var aKeys = keys(a);\n  var bKeys = keys(b);\n  return aKeys.length === bKeys.length && aKeys.every(function (key) {\n    return stateValuesEqual(a[key], b[key]);\n  });\n}\nfunction isState(state) {\n  if (isString(state)) {\n    return false;\n  }\n\n  return 'value' in state && 'history' in state;\n}\nfunction bindActionToState(action, state) {\n  var exec = action.exec;\n\n  var boundAction = __assign(__assign({}, action), {\n    exec: exec !== undefined ? function () {\n      return exec(state.context, state.event, {\n        action: action,\n        state: state,\n        _event: state._event\n      });\n    } : undefined\n  });\n\n  return boundAction;\n}\n\nvar State =\n/*#__PURE__*/\n\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new State instance.\r\n   * @param value The state value\r\n   * @param context The extended state\r\n   * @param historyValue The tree representing historical values of the state nodes\r\n   * @param history The previous state\r\n   * @param actions An array of action objects to execute as side-effects\r\n   * @param activities A mapping of activities and whether they are started (`true`) or stopped (`false`).\r\n   * @param meta\r\n   * @param events Internal event queue. Should be empty with run-to-completion semantics.\r\n   * @param configuration\r\n   */\n  function State(config) {\n    var _this = this;\n\n    var _a;\n\n    this.actions = [];\n    this.activities = EMPTY_ACTIVITY_MAP;\n    this.meta = {};\n    this.events = [];\n    this.value = config.value;\n    this.context = config.context;\n    this._event = config._event;\n    this._sessionid = config._sessionid;\n    this.event = this._event.data;\n    this.historyValue = config.historyValue;\n    this.history = config.history;\n    this.actions = config.actions || [];\n    this.activities = config.activities || EMPTY_ACTIVITY_MAP;\n    this.meta = getMeta(config.configuration);\n    this.events = config.events || [];\n    this.matches = this.matches.bind(this);\n    this.toStrings = this.toStrings.bind(this);\n    this.configuration = config.configuration;\n    this.transitions = config.transitions;\n    this.children = config.children;\n    this.done = !!config.done;\n    this.tags = (_a = Array.isArray(config.tags) ? new Set(config.tags) : config.tags) !== null && _a !== void 0 ? _a : new Set();\n    this.machine = config.machine;\n    Object.defineProperty(this, 'nextEvents', {\n      get: function () {\n        return nextEvents(_this.configuration);\n      }\n    });\n  }\n  /**\r\n   * Creates a new State instance for the given `stateValue` and `context`.\r\n   * @param stateValue\r\n   * @param context\r\n   */\n\n\n  State.from = function (stateValue, context) {\n    if (stateValue instanceof State) {\n      if (stateValue.context !== context) {\n        return new State({\n          value: stateValue.value,\n          context: context,\n          _event: stateValue._event,\n          _sessionid: null,\n          historyValue: stateValue.historyValue,\n          history: stateValue.history,\n          actions: [],\n          activities: stateValue.activities,\n          meta: {},\n          events: [],\n          configuration: [],\n          transitions: [],\n          children: {}\n        });\n      }\n\n      return stateValue;\n    }\n\n    var _event = initEvent;\n    return new State({\n      value: stateValue,\n      context: context,\n      _event: _event,\n      _sessionid: null,\n      historyValue: undefined,\n      history: undefined,\n      actions: [],\n      activities: undefined,\n      meta: undefined,\n      events: [],\n      configuration: [],\n      transitions: [],\n      children: {}\n    });\n  };\n  /**\r\n   * Creates a new State instance for the given `config`.\r\n   * @param config The state config\r\n   */\n\n\n  State.create = function (config) {\n    return new State(config);\n  };\n  /**\r\n   * Creates a new `State` instance for the given `stateValue` and `context` with no actions (side-effects).\r\n   * @param stateValue\r\n   * @param context\r\n   */\n\n\n  State.inert = function (stateValue, context) {\n    if (stateValue instanceof State) {\n      if (!stateValue.actions.length) {\n        return stateValue;\n      }\n\n      var _event = initEvent;\n      return new State({\n        value: stateValue.value,\n        context: context,\n        _event: _event,\n        _sessionid: null,\n        historyValue: stateValue.historyValue,\n        history: stateValue.history,\n        activities: stateValue.activities,\n        configuration: stateValue.configuration,\n        transitions: [],\n        children: {}\n      });\n    }\n\n    return State.from(stateValue, context);\n  };\n  /**\r\n   * Returns an array of all the string leaf state node paths.\r\n   * @param stateValue\r\n   * @param delimiter The character(s) that separate each subpath in the string state node path.\r\n   */\n\n\n  State.prototype.toStrings = function (stateValue, delimiter) {\n    var _this = this;\n\n    if (stateValue === void 0) {\n      stateValue = this.value;\n    }\n\n    if (delimiter === void 0) {\n      delimiter = '.';\n    }\n\n    if (isString(stateValue)) {\n      return [stateValue];\n    }\n\n    var valueKeys = keys(stateValue);\n    return valueKeys.concat.apply(valueKeys, __spreadArray([], __read(valueKeys.map(function (key) {\n      return _this.toStrings(stateValue[key], delimiter).map(function (s) {\n        return key + delimiter + s;\n      });\n    }))));\n  };\n\n  State.prototype.toJSON = function () {\n    var _a = this,\n        configuration = _a.configuration,\n        transitions = _a.transitions,\n        tags = _a.tags,\n        machine = _a.machine,\n        jsonValues = __rest(_a, [\"configuration\", \"transitions\", \"tags\", \"machine\"]);\n\n    return __assign(__assign({}, jsonValues), {\n      tags: Array.from(tags)\n    });\n  };\n  /**\r\n   * Whether the current state value is a subset of the given parent state value.\r\n   * @param parentStateValue\r\n   */\n\n\n  State.prototype.matches = function (parentStateValue) {\n    return matchesState(parentStateValue, this.value);\n  };\n  /**\r\n   * Whether the current state configuration has a state node with the specified `tag`.\r\n   * @param tag\r\n   */\n\n\n  State.prototype.hasTag = function (tag) {\n    return this.tags.has(tag);\n  };\n  /**\r\n   * Determines whether sending the `event` will cause a transition.\r\n   * @param event The event to test\r\n   * @returns Whether the event will cause a transition\r\n   */\n\n\n  State.prototype.can = function (event) {\n    var _a;\n\n    if (IS_PRODUCTION) {\n      warn(!!this.machine, \"state.can(...) used outside of a machine-created State object; this will always return false.\");\n    }\n\n    return !!((_a = this.machine) === null || _a === void 0 ? void 0 : _a.transition(this, event).changed);\n  };\n\n  return State;\n}();\n\nexport { State, bindActionToState, isState, stateValuesEqual };\n"]},"metadata":{},"sourceType":"module"}