{"ast":null,"code":"// 로컬 시간을 감안하여 toJSON으로 변환.\nDate.prototype.toJSON = function () {\n  var timezoneOffsetInHours = -(this.getTimezoneOffset() / 60); //UTC minus local time\n\n  var sign = timezoneOffsetInHours >= 0 ? \"+\" : \"-\";\n  var leadingZero = Math.abs(timezoneOffsetInHours) < 10 ? \"0\" : \"\";\n  var correctedDate = new Date(this.getFullYear(), this.getMonth(), this.getDate(), this.getHours(), this.getMinutes(), this.getSeconds(), this.getMilliseconds());\n  correctedDate.setHours(this.getHours() + timezoneOffsetInHours);\n  var iso = correctedDate.toISOString().replace(\"Z\", \"\");\n  return iso + sign + leadingZero + Math.abs(timezoneOffsetInHours).toString() + \":00\";\n};\n\nexport const prettyDate = dateString => {\n  const str = dateString;\n  const list = str.split(\".\")[0].split(\"T\");\n  const YMD = list[0].split(\"-\"); //[0]년[1]월[2]일\n\n  const HMS = list[1].split(\":\"); //[0]시[1]분[2]초\n\n  const day = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"][new Date(str).getDay()];\n  const today = new Date().toJSON();\n  const list_today = today.split(\".\")[0].split(\"T\");\n  const YMD_today = list_today[0].split(\"-\"); //[0]년[1]월[2]일\n  // const HMS_today = list_today[1].split(\":\"); //[0]시[1]분[2]초\n\n  if (YMD[0] !== YMD_today[0] || YMD[1] !== YMD_today[1] || Number(YMD[2]) < Number(YMD_today[2])) return `${Number(YMD[0])}년${Number(YMD[1])}월${Number(YMD[2])}일`;else if (YMD[2] === YMD_today[2]) return `오늘 ${Number(HMS[0])}시${Number(HMS[1])}분`;else if (Number(YMD[2]) === Number(YMD_today[2]) + 1) return `내일 ${Number(HMS[0])}시${Number(HMS[1])}분`;else if (Number(YMD[2]) === Number(YMD_today[2]) + 2) return `모레 ${Number(YMD[2])}일 ${Number(HMS[0])}시${Number(HMS[1])}분`;else return `이번주 ${day}요일 ${Number(HMS[0])}시${Number(HMS[1])}분`;\n};","map":{"version":3,"sources":["/Users/macbook/_myProject/campustaxi-2-webview/src/components/common/prettyDate.js"],"names":["Date","prototype","toJSON","timezoneOffsetInHours","getTimezoneOffset","sign","leadingZero","Math","abs","correctedDate","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","setHours","iso","toISOString","replace","toString","prettyDate","dateString","str","list","split","YMD","HMS","day","getDay","today","list_today","YMD_today","Number"],"mappings":"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","sourcesContent":["// 로컬 시간을 감안하여 toJSON으로 변환.\nDate.prototype.toJSON = function () {\n  var timezoneOffsetInHours = -(this.getTimezoneOffset() / 60); //UTC minus local time\n  var sign = timezoneOffsetInHours >= 0 ? \"+\" : \"-\";\n  var leadingZero = Math.abs(timezoneOffsetInHours) < 10 ? \"0\" : \"\";\n  var correctedDate = new Date(\n    this.getFullYear(),\n    this.getMonth(),\n    this.getDate(),\n    this.getHours(),\n    this.getMinutes(),\n    this.getSeconds(),\n    this.getMilliseconds()\n  );\n  correctedDate.setHours(this.getHours() + timezoneOffsetInHours);\n  var iso = correctedDate.toISOString().replace(\"Z\", \"\");\n  return iso + sign + leadingZero + Math.abs(timezoneOffsetInHours).toString() + \":00\";\n};\n\nexport const prettyDate = (dateString) => {\n  const str = dateString;\n  const list = str.split(\".\")[0].split(\"T\");\n  const YMD = list[0].split(\"-\"); //[0]년[1]월[2]일\n  const HMS = list[1].split(\":\"); //[0]시[1]분[2]초\n  const day = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"][new Date(str).getDay()];\n\n  const today = new Date().toJSON();\n  const list_today = today.split(\".\")[0].split(\"T\");\n  const YMD_today = list_today[0].split(\"-\"); //[0]년[1]월[2]일\n  // const HMS_today = list_today[1].split(\":\"); //[0]시[1]분[2]초\n\n  if (YMD[0] !== YMD_today[0] || YMD[1] !== YMD_today[1] || Number(YMD[2]) < Number(YMD_today[2]))\n    return `${Number(YMD[0])}년${Number(YMD[1])}월${Number(YMD[2])}일`;\n  else if (YMD[2] === YMD_today[2]) return `오늘 ${Number(HMS[0])}시${Number(HMS[1])}분`;\n  else if (Number(YMD[2]) === Number(YMD_today[2]) + 1) return `내일 ${Number(HMS[0])}시${Number(HMS[1])}분`;\n  else if (Number(YMD[2]) === Number(YMD_today[2]) + 2)\n    return `모레 ${Number(YMD[2])}일 ${Number(HMS[0])}시${Number(HMS[1])}분`;\n  else return `이번주 ${day}요일 ${Number(HMS[0])}시${Number(HMS[1])}분`;\n};\n"]},"metadata":{},"sourceType":"module"}