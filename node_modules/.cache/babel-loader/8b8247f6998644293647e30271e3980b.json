{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/_myProject/campustaxi-2-webview/src/components/Input/CommandInput/dndFunc.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//#region CommandArea Functions\n// fake data generator\nexport const getItems = (count, offset = 0, type = \"text\", content = \"\") => Array.from({\n  length: count\n}, (v, k) => k).map(k => ({\n  id: `item-${k + offset + new Date().getTime()}`,\n  content: type === \"text\" ? () => /*#__PURE__*/_jsxDEV(\"span\", {\n    contentEditable: \"true\",\n    suppressContentEditableWarning: true,\n    children: \"\\uC5EC\\uAE30\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 34\n  }, this) : content,\n  type: type\n})); // a little function to help us with reordering the result\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\nexport const getItemStyle = (isDragging, draggableStyle) => {\n  let translate = draggableStyle.transform;\n\n  if (isDragging && typeof draggableStyle.transform == \"string\") {\n    let y = Number(translate.split(\",\")[1].split(\"x\")[0].slice(1, -1));\n    translate = translate.split(\",\")[0] + `, ${y - 40}px)`;\n    draggableStyle.transform = translate;\n  }\n\n  return {\n    // some basic styles to make the items look a bit nicer\n    userSelect: \"none\",\n    // change background colour if dragging\n    // styles we need to apply on draggables\n    ...draggableStyle // transform: `translate(${draggableStyle.style.transform.x}px, ${draggableStyle.style.transform.y}px)`,\n\n  };\n};\nexport const getListStyle = () => ({\n  flex: 1\n});\nexport const onDragEnd = (result, list, setList) => {\n  if (!result.destination) return;\n  const arr = reorder(list, result.source.index, result.destination.index);\n  setList(arr);\n}; //#endregion","map":{"version":3,"sources":["/Users/macbook/_myProject/campustaxi-2-webview/src/components/Input/CommandInput/dndFunc.js"],"names":["getItems","count","offset","type","content","Array","from","length","v","k","map","id","Date","getTime","reorder","list","startIndex","endIndex","result","removed","splice","getItemStyle","isDragging","draggableStyle","translate","transform","y","Number","split","slice","userSelect","getListStyle","flex","onDragEnd","setList","destination","arr","source","index"],"mappings":";;AAAA;AACA;AACA,OAAO,MAAMA,QAAQ,GAAG,CAACC,KAAD,EAAQC,MAAM,GAAG,CAAjB,EAAoBC,IAAI,GAAG,MAA3B,EAAmCC,OAAO,GAAG,EAA7C,KACtBC,KAAK,CAACC,IAAN,CAAW;AAAEC,EAAAA,MAAM,EAAEN;AAAV,CAAX,EAA8B,CAACO,CAAD,EAAIC,CAAJ,KAAUA,CAAxC,EAA2CC,GAA3C,CAAgDD,CAAD,KAAQ;AACrDE,EAAAA,EAAE,EAAG,QAAOF,CAAC,GAAGP,MAAJ,GAAa,IAAIU,IAAJ,GAAWC,OAAX,EAAqB,EADO;AAErDT,EAAAA,OAAO,EAAED,IAAI,KAAG,MAAP,GAAgB,mBAAI;AAAM,IAAA,eAAe,EAAE,MAAvB;AAA+B,IAAA,8BAA8B,MAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAApB,GAA+FC,OAFnD;AAGrDD,EAAAA,IAAI,EAAEA;AAH+C,CAAR,CAA/C,CADK,C,CAMP;;AACA,MAAMW,OAAO,GAAG,CAACC,IAAD,EAAOC,UAAP,EAAmBC,QAAnB,KAAgC;AAC9C,QAAMC,MAAM,GAAGb,KAAK,CAACC,IAAN,CAAWS,IAAX,CAAf;AACA,QAAM,CAACI,OAAD,IAAYD,MAAM,CAACE,MAAP,CAAcJ,UAAd,EAA0B,CAA1B,CAAlB;AACAE,EAAAA,MAAM,CAACE,MAAP,CAAcH,QAAd,EAAwB,CAAxB,EAA2BE,OAA3B;AAEA,SAAOD,MAAP;AACD,CAND;;AAQA,OAAO,MAAMG,YAAY,GAAG,CAACC,UAAD,EAAaC,cAAb,KAAgC;AAC1D,MAAIC,SAAS,GAAGD,cAAc,CAACE,SAA/B;;AACA,MAAIH,UAAU,IAAI,OAAOC,cAAc,CAACE,SAAtB,IAAmC,QAArD,EAA+D;AAC7D,QAAIC,CAAC,GAAGC,MAAM,CAACH,SAAS,CAACI,KAAV,CAAgB,GAAhB,EAAqB,CAArB,EAAwBA,KAAxB,CAA8B,GAA9B,EAAmC,CAAnC,EAAsCC,KAAtC,CAA4C,CAA5C,EAA+C,CAAC,CAAhD,CAAD,CAAd;AACAL,IAAAA,SAAS,GAAGA,SAAS,CAACI,KAAV,CAAgB,GAAhB,EAAqB,CAArB,IAA2B,KAAIF,CAAC,GAAG,EAAG,KAAlD;AACAH,IAAAA,cAAc,CAACE,SAAf,GAA2BD,SAA3B;AACD;;AACD,SAAO;AACL;AACAM,IAAAA,UAAU,EAAE,MAFP;AAGL;AACA;AACA,OAAGP,cALE,CAML;;AANK,GAAP;AAQD,CAfM;AAgBP,OAAO,MAAMQ,YAAY,GAAG,OAAO;AACjCC,EAAAA,IAAI,EAAE;AAD2B,CAAP,CAArB;AAGP,OAAO,MAAMC,SAAS,GAAG,CAACf,MAAD,EAASH,IAAT,EAAemB,OAAf,KAA2B;AAClD,MAAI,CAAChB,MAAM,CAACiB,WAAZ,EAAyB;AACzB,QAAMC,GAAG,GAAGtB,OAAO,CAACC,IAAD,EAAOG,MAAM,CAACmB,MAAP,CAAcC,KAArB,EAA4BpB,MAAM,CAACiB,WAAP,CAAmBG,KAA/C,CAAnB;AACAJ,EAAAA,OAAO,CAACE,GAAD,CAAP;AACD,CAJM,C,CAKP","sourcesContent":["//#region CommandArea Functions\n// fake data generator\nexport const getItems = (count, offset = 0, type = \"text\", content = \"\") =>\n  Array.from({ length: count }, (v, k) => k).map((k) => ({\n    id: `item-${k + offset + new Date().getTime()}`,\n    content: type===\"text\" ? ()=><span contentEditable={\"true\"} suppressContentEditableWarning>여기</span>  : content,\n    type: type,\n  }));\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nexport const getItemStyle = (isDragging, draggableStyle) => {\n  let translate = draggableStyle.transform;\n  if (isDragging && typeof draggableStyle.transform == \"string\") {\n    let y = Number(translate.split(\",\")[1].split(\"x\")[0].slice(1, -1));\n    translate = translate.split(\",\")[0] + `, ${y - 40}px)`;\n    draggableStyle.transform = translate;\n  }\n  return {\n    // some basic styles to make the items look a bit nicer\n    userSelect: \"none\",\n    // change background colour if dragging\n    // styles we need to apply on draggables\n    ...draggableStyle,\n    // transform: `translate(${draggableStyle.style.transform.x}px, ${draggableStyle.style.transform.y}px)`,\n  };\n};\nexport const getListStyle = () => ({\n  flex: 1,\n});\nexport const onDragEnd = (result, list, setList) => {\n  if (!result.destination) return;\n  const arr = reorder(list, result.source.index, result.destination.index);\n  setList(arr);\n};\n//#endregion\n"]},"metadata":{},"sourceType":"module"}